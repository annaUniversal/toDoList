<%- include("partials/head.ejs") %> <%- include("partials/header.ejs") %>

<h2>Tasks List</h2>

<table>
  <tr>
    <td>
      <button type="button" onclick="filterTasks('work')">Work Only</button>
      <button type="button" onclick="filterTasks('personal')">
        Personal Only
      </button>
      <button type="button" onclick="filterTasks('all')">Show All</button>
      <a href="/events">
        <button type="button">Show my Events</button>
      </a>
    </td>
  </tr>
</table>

<table id="tasks-table">
  <tr id="tasks-table-header">
    <th onclick="sortDate('category', this)">Category</th>
    <th onclick="sortDate('taskName', this)">Task description</th>
    <th onclick="sortDate('status', this)">Status</th>
    <th onclick="sortDate('createdAt', this)">Created</th>
    <th onclick="sortDate('updatedAt', this)">Updated</th>
    <th onclick="sortDate('dueDate', this)">Due date</th>
    <th>Notes</th>
    <th colspan="2" id="sort-icons-row"></th>
  </tr>
  <% if (tasks && tasks.length) { tasks.forEach((task) => { %>
  <tr class="task-row" data-category="<%= task.category %>">
    <td><%= task.category %></td>
    <td><%= task.taskName %></td>
    <td><%= task.status %></td>
    <td>
      <%= task.createdAt.toISOString().substr(5, 2) + '/' +
      task.createdAt.toISOString().substr(8, 2) + '/' +
      task.createdAt.toISOString().substr(0, 4) %>
    </td>
    <td>
      <%= task.updatedAt.toISOString().substr(5, 2) + '/' +
      task.updatedAt.toISOString().substr(8, 2) + '/' +
      task.updatedAt.toISOString().substr(0, 4) %>
    </td>
    <td>
      <%= task.dueDate.toISOString().substr(5, 2) + '/' +
      task.dueDate.toISOString().substr(8, 2) + '/' +
      task.dueDate.toISOString().substr(0, 4) %>
    </td>
    <td><%= task.notes %></td>
    <td>
      <a href="/tasks/edit/<%= task.id %>">
        <button type="button">Edit</button>
      </a>
    </td>
    <td>
      <form
        method="POST"
        action="/tasks/delete/<%= task.id %>"
        style="display: inline"
      >
        <button>Delete</button>
        <input type="hidden" name="_csrf" value="<%= _csrf %>" />
      </form>
    </td>
  </tr>
  <% }) } %>
</table>

<a href="/tasks/new">
  <button type="button">Add New Task</button>
</a>

<script>
  function filterTasks(category) {
    const rows = document.querySelectorAll(".task-row");
    rows.forEach((row) => {
      const rowCategory = row.getAttribute("data-category");
      if (category === "all" || rowCategory === category) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    });
  }

  let sortDirection = {
    createdAt: "asc",
    updatedAt: "asc",
    dueDate: "asc",
  };

  function sortDate(column, button) {
    const rows = Array.from(document.querySelectorAll(".task-row"));

    // Toggle sort direction
    sortDirection[column] = sortDirection[column] === "asc" ? "desc" : "asc";

    // Clear existing icons from other column headers
    clearSortIcons(column);

    // Update sorting icon for the clicked button
    updateSortIcon(button, sortDirection[column]);

    // Update sorting icon for the corresponding date column header
    const dateColumnHeader = document.querySelector(
      `th[data-column="${column}"]`
    );
    updateSortIcon(dateColumnHeader, sortDirection[column]);

    rows.sort((a, b) => {
      const valueA = getValue(a, column);
      const valueB = getValue(b, column);

      if (typeof valueA === "string" && typeof valueB === "string") {
        // Use localeCompare for string comparison
        return sortDirection[column] === "asc"
          ? valueA.localeCompare(valueB)
          : valueB.localeCompare(valueA);
      } else {
        // For non-string columns (e.g., dates), use numeric comparison
        return sortDirection[column] === "asc"
          ? valueA - valueB
          : valueB - valueA;
      }
    });

    const tasksTable = document.getElementById("tasks-table");

    // Create a document fragment to hold sorted rows
    const fragment = document.createDocumentFragment();

    // Append the header row to the fragment
    fragment.appendChild(tasksTable.querySelector("#tasks-table-header"));

    // Append sorted rows to the fragment
    rows.forEach((row) => fragment.appendChild(row));

    // Clear existing rows only if sorting is successful
    if (fragment.childNodes.length === rows.length + 1) {
      tasksTable.innerHTML = "";

      // Append sorted rows, including the header, to the tasksTable
      tasksTable.appendChild(fragment);
    }
  }

  function clearSortIcons(currentColumn) {
    const columnHeaders = document.querySelectorAll("#tasks-table-header th");
    columnHeaders.forEach((header) => {
      const column = header.getAttribute("data-column");

      if (column !== currentColumn) {
        // Clear icons from other column headers
        const existingIcons = header.querySelectorAll("span");
        existingIcons.forEach((icon) => icon.remove());
      }
    });
  }

  function updateSortIcon(element, direction) {
    const icons = {
      asc: "&#9650;",
      desc: "&#9660;",
    };

    // Check if the element exists
    if (element) {
      // Remove existing icons
      const existingIcons = element.querySelectorAll("span");
      existingIcons.forEach((icon) => icon.remove());

      // Update the icon for the clicked element
      const iconElement = document.createElement("span");
      iconElement.innerHTML = `${icons[direction]}`;
      element.appendChild(iconElement);
    }
  }

  function getValue(row, column) {
    const cellValue = row
      .querySelector(`td:nth-child(${getColumnIndex(column)})`)
      .textContent.trim();

    if (
      column === "createdAt" ||
      column === "updatedAt" ||
      column === "dueDate"
    ) {
      // If the column is a date, convert it to a Date object
      return new Date(cellValue);
    } else if (!isNaN(parseFloat(cellValue))) {
      // For numeric values, convert to a number
      return parseFloat(cellValue);
    } else {
      // For other columns, treat as strings
      return cellValue.toLowerCase(); // Use toLowerCase for case-insensitive sorting
    }
  }

  function getColumnIndex(column) {
    // Replace with the correct column indices for your table
    // Adjust the indices based on the actual structure of your table
    switch (column) {
      case "category":
        return 1;
      case "taskName":
        return 2;
      case "status":
        return 3;
      case "createdAt":
        return 4;
      case "updatedAt":
        return 5;
      case "dueDate":
        return 6;
      default:
        return 1;
    }
  }
</script>
