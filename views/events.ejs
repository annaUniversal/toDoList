<%- include("partials/head.ejs") %> <%- include("partials/header.ejs") %>

<h2>Events List</h2>

<table>
  <tr>
    <td>
      <a href="/tasks">
        <button type="button">Show my Tasks</button>
      </a>
      <!-- <button type="button" onclick="filterEvents('all')">Show All</button> -->
      <a href="/events/new">
        <button type="button">Add New Event</button>
      </a>
    </td>
  </tr>
</table>

<table id="events-table">
  <tr id="events-table-header">
    <th onclick="sortDate('eventName', this)">Event</th>
    <th onclick="sortDate('status', this)">Status</th>
    <th onclick="sortDate('dueDate', this)">Event date</th>
    <th>Event description</th>
    <th colspan="2" id="sort-icons-row"></th>
  </tr>
  <% if (events && events.length) { events.forEach((event) => { %>
  <tr class="event-row" data-event="<%= event.event %>">
    <td><%= event.eventName %></td>
    <td><%= event.status %></td>
    <td>
      <%= event.dueDate.toLocaleDateString('en-US', { year: 'numeric', month:
      'short', day: 'numeric', }) %>
    </td>
    <td><%= event.description %></td>
    <td>
      <a href="/events/edit/<%= event.id %>">
        <button type="button">Edit</button>
      </a>
    </td>
    <td>
      <form
        method="POST"
        action="/events/delete/<%= event.id %>"
        style="display: inline"
      >
        <button>Delete</button>
        <input type="hidden" name="_csrf" value="<%= _csrf %>" />
      </form>
    </td>
  </tr>
  <% }) } %>
</table>

<script>
  function filterEvents(event) {
    const rows = document.querySelectorAll(".event-row");
    rows.forEach((row) => {
      const rowCategory = row.getAttribute("data-event");
      if (event === "all" || rowCategory === event) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    });
  }

  let sortDirection = { dueDate: "asc" };

  function sortDate(column, button) {
    const rows = Array.from(document.querySelectorAll(".event-row"));

    // Toggle sort direction
    sortDirection[column] = sortDirection[column] === "asc" ? "desc" : "asc";

    // Clear existing icons from other column headers
    clearSortIcons(column);

    // Update sorting icon for the clicked button
    updateSortIcon(button, sortDirection[column]);

    // Update sorting icon for the corresponding date column header
    const dateColumnHeader = document.querySelector(
      `th[data-column="${column}"]`
    );
    updateSortIcon(dateColumnHeader, sortDirection[column]);

    rows.sort((a, b) => {
      const valueA = getValue(a, column);
      const valueB = getValue(b, column);

      if (typeof valueA === "string" && typeof valueB === "string") {
        // Use localeCompare for string comparison
        return sortDirection[column] === "asc"
          ? valueA.localeCompare(valueB)
          : valueB.localeCompare(valueA);
      } else {
        // For non-string columns (e.g., dates), use numeric comparison
        return sortDirection[column] === "asc"
          ? valueA - valueB
          : valueB - valueA;
      }
    });

    const eventsTable = document.getElementById("events-table");

    // Create a document fragment to hold sorted rows
    const fragment = document.createDocumentFragment();

    // Append the header row to the fragment
    fragment.appendChild(eventsTable.querySelector("#events-table-header"));

    // Append sorted rows to the fragment
    rows.forEach((row) => fragment.appendChild(row));

    // Clear existing rows only if sorting is successful
    if (fragment.childNodes.length === rows.length + 1) {
      eventsTable.innerHTML = "";

      // Append sorted rows, including the header, to the eventsTable
      eventsTable.appendChild(fragment);
    }
  }

  function clearSortIcons(currentColumn) {
    const columnHeaders = document.querySelectorAll("#events-table-header th");
    columnHeaders.forEach((header) => {
      const column = header.getAttribute("data-column");

      if (column !== currentColumn) {
        // Clear icons from other column headers
        const existingIcons = header.querySelectorAll("span");
        existingIcons.forEach((icon) => icon.remove());
      }
    });
  }

  function updateSortIcon(element, direction) {
    const icons = {
      asc: "&#9650;",
      desc: "&#9660;",
    };

    // Check if the element exists
    if (element) {
      // Remove existing icons
      const existingIcons = element.querySelectorAll("span");
      existingIcons.forEach((icon) => icon.remove());

      // Update the icon for the clicked element
      const iconElement = document.createElement("span");
      iconElement.innerHTML = `${icons[direction]}`;
      element.appendChild(iconElement);
    }
  }

  function getValue(row, column) {
    const cellValue = row
      .querySelector(`td:nth-child(${getColumnIndex(column)})`)
      .textContent.trim();

    if (
      column === "dueDate"
    ) {
      // If the column is a date, convert it to a Date object
      return new Date(cellValue);
    } else if (!isNaN(parseFloat(cellValue))) {
      // For numeric values, convert to a number
      return parseFloat(cellValue);
    } else {
      // For other columns, treat as strings
      return cellValue.toLowerCase(); // Use toLowerCase for case-insensitive sorting
    }
  }

  function getColumnIndex(column) {
    // Replace with the correct column indices for your table
    // Adjust the indices based on the actual structure of your table
    switch (column) {
      case "eventName":
        return 1;
      case "status":
        return 2;
      case "dueDate":
        return 3;
      case "description":
        return 4;
      default:
        return 1;
    }
  }
</script>
